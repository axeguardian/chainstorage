// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: coinbase/chainstorage/blockchain_xrp.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LedgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A 20-byte hex string for identifying the ledger version
	LedgerHash string `protobuf:"bytes,1,opt,name=ledger_hash,json=ledgerHash,proto3" json:"ledger_hash,omitempty"`
	// The index of the ledger to retrieve information
	LedgerIndex uint32 `protobuf:"varint,2,opt,name=ledger_index,json=ledgerIndex,proto3" json:"ledger_index,omitempty"`
	// A boolean flag indicating whether to include the information about transactions
	// in the specified ledger version
	Expand bool `protobuf:"varint,3,opt,name=expand,proto3" json:"expand,omitempty"`
	// A boolean flag indicating whether to provide full JSON-formatted
	// information for transaction/account information instead of only hashes
	FullJson bool `protobuf:"varint,4,opt,name=full_json,json=fullJson,proto3" json:"full_json,omitempty"`
	// A boolean flag indicating whether to include owner_funds field in the
	// metadata of OfferCreate transactions in the response
	IncludeOwnerFunds bool `protobuf:"varint,5,opt,name=include_owner_funds,json=includeOwnerFunds,proto3" json:"include_owner_funds,omitempty"`
	// If true, and transactions and expand are both also true, the response
	// will contain transaction information in binary format represented as a
	// hexadecimal string, instead of the default JSON format
	BinaryFormat bool `protobuf:"varint,6,opt,name=binary_format,json=binaryFormat,proto3" json:"binary_format,omitempty"`
	// Includes an array of queued transactions in the response results when the
	// 'queued' parameter is set to true and the command is requesting the current ledger
	Queued bool `protobuf:"varint,7,opt,name=queued,proto3" json:"queued,omitempty"`
	// Filters by a ledger entry type. The valid types are: account, amendments, amm,
	// check, deposit_preauth, directory, escrow, fee, hashes, nft_offer, offer,
	// payment_channel, signer_list, state (trust line), and ticket. If using
	// request accounts (state data), ignore it
	EntryTypes []string `protobuf:"bytes,8,rep,name=entry_types,json=entryTypes,proto3" json:"entry_types,omitempty"`
	// If true, returns all objects that were added, modified, or deleted as part
	// of applying transactions in the specified ledger
	Transactions bool `protobuf:"varint,9,opt,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *LedgerRequest) Reset() {
	*x = LedgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerRequest) ProtoMessage() {}

func (x *LedgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerRequest.ProtoReflect.Descriptor instead.
func (*LedgerRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{0}
}

func (x *LedgerRequest) GetLedgerHash() string {
	if x != nil {
		return x.LedgerHash
	}
	return ""
}

func (x *LedgerRequest) GetLedgerIndex() uint32 {
	if x != nil {
		return x.LedgerIndex
	}
	return 0
}

func (x *LedgerRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *LedgerRequest) GetFullJson() bool {
	if x != nil {
		return x.FullJson
	}
	return false
}

func (x *LedgerRequest) GetIncludeOwnerFunds() bool {
	if x != nil {
		return x.IncludeOwnerFunds
	}
	return false
}

func (x *LedgerRequest) GetBinaryFormat() bool {
	if x != nil {
		return x.BinaryFormat
	}
	return false
}

func (x *LedgerRequest) GetQueued() bool {
	if x != nil {
		return x.Queued
	}
	return false
}

func (x *LedgerRequest) GetEntryTypes() []string {
	if x != nil {
		return x.EntryTypes
	}
	return nil
}

func (x *LedgerRequest) GetTransactions() bool {
	if x != nil {
		return x.Transactions
	}
	return false
}

type LedgerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It indicates the status of the response
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// It indicates whether the ledger has been validated
	Validated bool `protobuf:"varint,2,opt,name=validated,proto3" json:"validated,omitempty"`
	// An array of warning objects, each containing the following fields
	Warnings []*LedgerResponse_LedgerWarning `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// The header of the ledger
	LedgerHeader *LedgerHeader `protobuf:"bytes,4,opt,name=ledger_header,json=ledgerHeader,proto3" json:"ledger_header,omitempty"`
	// The transactions in the ledger
	Transactions []*LedgerTransactionHash `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *LedgerResponse) Reset() {
	*x = LedgerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerResponse) ProtoMessage() {}

func (x *LedgerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerResponse.ProtoReflect.Descriptor instead.
func (*LedgerResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{1}
}

func (x *LedgerResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LedgerResponse) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *LedgerResponse) GetWarnings() []*LedgerResponse_LedgerWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *LedgerResponse) GetLedgerHeader() *LedgerHeader {
	if x != nil {
		return x.LedgerHeader
	}
	return nil
}

func (x *LedgerResponse) GetTransactions() []*LedgerTransactionHash {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type LedgerHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A boolean flag indicating whether the ledger has been accepted
	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	// A hash value representing the state of all accounts in the ledger
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// A flags indicating the additional information about the ledger close
	CloseFlags uint32 `protobuf:"varint,3,opt,name=close_flags,json=closeFlags,proto3" json:"close_flags,omitempty"`
	// The timestamp when the ledger was closed, represented in UNIX time format
	CloseTime uint32 `protobuf:"varint,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// The time this ledger was closed, in human-readable format
	CloseTimeHuman string `protobuf:"bytes,5,opt,name=close_time_human,json=closeTimeHuman,proto3" json:"close_time_human,omitempty"`
	// close_time_resolution is deprecated, use close_time instead
	// uint32 close_time_resolution = 6 [deprecated = true];
	// A boolean flag indicating whether or not this ledger has been closed
	// bool closed_deprecated = 7 [deprecated = true];
	// The unique identifying hash of the entire ledger. This field is deprecated,
	// use ledger_hash instead
	// string ledger_hash_deprecated = 8 [deprecated = true];
	// The unique identifying hash of the entire ledger
	LedgerHash string `protobuf:"bytes,9,opt,name=ledger_hash,json=ledgerHash,proto3" json:"ledger_hash,omitempty"`
	// The time at which the previous ledger was closed
	PreviousCloseTime uint32 `protobuf:"varint,10,opt,name=previous_close_time,json=previousCloseTime,proto3" json:"previous_close_time,omitempty"`
	// The unique identifying hash of the ledger that came immediately before
	// this one
	PreviousLedgerHash string `protobuf:"bytes,11,opt,name=previous_ledger_hash,json=previousLedgerHash,proto3" json:"previous_ledger_hash,omitempty"`
	// The sequence number of the ledger
	LedgerIndex uint32 `protobuf:"varint,12,opt,name=ledger_index,json=ledgerIndex,proto3" json:"ledger_index,omitempty"`
	// The total number of coins in the ledger. This field is deprecated, use
	// total_coins instead
	// uint32 total_coins_deprecated = 13 [deprecated = true];
	// The total number of coins in the ledger
	TotalCoins uint32 `protobuf:"varint,14,opt,name=total_coins,json=totalCoins,proto3" json:"total_coins,omitempty"`
	// The transactions applied in this ledger version
	Transactions []*LedgerTransactionHash `protobuf:"bytes,15,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *LedgerHeader) Reset() {
	*x = LedgerHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerHeader) ProtoMessage() {}

func (x *LedgerHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerHeader.ProtoReflect.Descriptor instead.
func (*LedgerHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{2}
}

func (x *LedgerHeader) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *LedgerHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LedgerHeader) GetCloseFlags() uint32 {
	if x != nil {
		return x.CloseFlags
	}
	return 0
}

func (x *LedgerHeader) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *LedgerHeader) GetCloseTimeHuman() string {
	if x != nil {
		return x.CloseTimeHuman
	}
	return ""
}

func (x *LedgerHeader) GetLedgerHash() string {
	if x != nil {
		return x.LedgerHash
	}
	return ""
}

func (x *LedgerHeader) GetPreviousCloseTime() uint32 {
	if x != nil {
		return x.PreviousCloseTime
	}
	return 0
}

func (x *LedgerHeader) GetPreviousLedgerHash() string {
	if x != nil {
		return x.PreviousLedgerHash
	}
	return ""
}

func (x *LedgerHeader) GetLedgerIndex() uint32 {
	if x != nil {
		return x.LedgerIndex
	}
	return 0
}

func (x *LedgerHeader) GetTotalCoins() uint32 {
	if x != nil {
		return x.TotalCoins
	}
	return 0
}

func (x *LedgerHeader) GetTransactions() []*LedgerTransactionHash {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type LedgerTransactionHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifying hash of the transaction
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *LedgerTransactionHash) Reset() {
	*x = LedgerTransactionHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerTransactionHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerTransactionHash) ProtoMessage() {}

func (x *LedgerTransactionHash) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerTransactionHash.ProtoReflect.Descriptor instead.
func (*LedgerTransactionHash) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{3}
}

func (x *LedgerTransactionHash) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type LedgerTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction string `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`               // The 256-bit hash of the transaction, as hex (REQUIRED)
	Binary      bool   `protobuf:"varint,2,opt,name=binary,proto3" json:"binary,omitempty"`                        // If true, return transaction data and metadata as binary serialized to hexadecimal strings
	MinLedger   uint32 `protobuf:"varint,3,opt,name=min_ledger,json=minLedger,proto3" json:"min_ledger,omitempty"` // It is used with min_ledger to specify a range of up to 1000 ledger indexes, ending with this ledger (inclusive)
	MaxLedger   uint32 `protobuf:"varint,4,opt,name=max_ledger,json=maxLedger,proto3" json:"max_ledger,omitempty"` // It is used with max_ledger to specify a range of up to 1000 ledger indexes, starting with this ledger (inclusive)
}

func (x *LedgerTransactionRequest) Reset() {
	*x = LedgerTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerTransactionRequest) ProtoMessage() {}

func (x *LedgerTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerTransactionRequest.ProtoReflect.Descriptor instead.
func (*LedgerTransactionRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{4}
}

func (x *LedgerTransactionRequest) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *LedgerTransactionRequest) GetBinary() bool {
	if x != nil {
		return x.Binary
	}
	return false
}

func (x *LedgerTransactionRequest) GetMinLedger() uint32 {
	if x != nil {
		return x.MinLedger
	}
	return 0
}

func (x *LedgerTransactionRequest) GetMaxLedger() uint32 {
	if x != nil {
		return x.MaxLedger
	}
	return 0
}

type TakerGets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"` // The currency value in hexadecimal format.
	Issuer   string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`     // The issuer of the currency, if applicable.
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`       // The actual value of the currency.
}

func (x *TakerGets) Reset() {
	*x = TakerGets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakerGets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakerGets) ProtoMessage() {}

func (x *TakerGets) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakerGets.ProtoReflect.Descriptor instead.
func (*TakerGets) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{5}
}

func (x *TakerGets) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TakerGets) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TakerGets) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// DeletedNode contains information about a deleted node.
type DeletedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerEntryType string                   `protobuf:"bytes,11,opt,name=ledger_entry_type,json=ledgerEntryType,proto3" json:"ledger_entry_type,omitempty"` // The type of ledger entry.
	LedgerIndex     string                   `protobuf:"bytes,12,opt,name=ledger_index,json=ledgerIndex,proto3" json:"ledger_index,omitempty"`               // The ledger index of the node.
	FinalFields     *DeletedNode_FinalFields `protobuf:"bytes,13,opt,name=final_fields,json=finalFields,proto3" json:"final_fields,omitempty"`               // The final fields of the node.
}

func (x *DeletedNode) Reset() {
	*x = DeletedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedNode) ProtoMessage() {}

func (x *DeletedNode) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedNode.ProtoReflect.Descriptor instead.
func (*DeletedNode) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{6}
}

func (x *DeletedNode) GetLedgerEntryType() string {
	if x != nil {
		return x.LedgerEntryType
	}
	return ""
}

func (x *DeletedNode) GetLedgerIndex() string {
	if x != nil {
		return x.LedgerIndex
	}
	return ""
}

func (x *DeletedNode) GetFinalFields() *DeletedNode_FinalFields {
	if x != nil {
		return x.FinalFields
	}
	return nil
}

// ModifiedNode contains information about a modified node.
type ModifiedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerEntryType   string                    `protobuf:"bytes,6,opt,name=ledger_entry_type,json=ledgerEntryType,proto3" json:"ledger_entry_type,omitempty"`           // The type of ledger entry.
	LedgerIndex       string                    `protobuf:"bytes,7,opt,name=ledger_index,json=ledgerIndex,proto3" json:"ledger_index,omitempty"`                         // The ledger index of the node.
	FinalFields       *ModifiedNode_FinalFields `protobuf:"bytes,8,opt,name=final_fields,json=finalFields,proto3" json:"final_fields,omitempty"`                         // The final fields of the node.
	PreviousFields    *ModifiedNode_FinalFields `protobuf:"bytes,9,opt,name=previous_fields,json=previousFields,proto3" json:"previous_fields,omitempty"`                // The previous fields of the node.
	PreviousTxnId     string                    `protobuf:"bytes,10,opt,name=previous_txn_id,json=previousTxnId,proto3" json:"previous_txn_id,omitempty"`                // The transaction ID of the previous transaction.
	PreviousTxnLgrSeq uint32                    `protobuf:"varint,11,opt,name=previous_txn_lgr_seq,json=previousTxnLgrSeq,proto3" json:"previous_txn_lgr_seq,omitempty"` // The ledger sequence of the previous transaction.
}

func (x *ModifiedNode) Reset() {
	*x = ModifiedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifiedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedNode) ProtoMessage() {}

func (x *ModifiedNode) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedNode.ProtoReflect.Descriptor instead.
func (*ModifiedNode) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{7}
}

func (x *ModifiedNode) GetLedgerEntryType() string {
	if x != nil {
		return x.LedgerEntryType
	}
	return ""
}

func (x *ModifiedNode) GetLedgerIndex() string {
	if x != nil {
		return x.LedgerIndex
	}
	return ""
}

func (x *ModifiedNode) GetFinalFields() *ModifiedNode_FinalFields {
	if x != nil {
		return x.FinalFields
	}
	return nil
}

func (x *ModifiedNode) GetPreviousFields() *ModifiedNode_FinalFields {
	if x != nil {
		return x.PreviousFields
	}
	return nil
}

func (x *ModifiedNode) GetPreviousTxnId() string {
	if x != nil {
		return x.PreviousTxnId
	}
	return ""
}

func (x *ModifiedNode) GetPreviousTxnLgrSeq() uint32 {
	if x != nil {
		return x.PreviousTxnLgrSeq
	}
	return 0
}

// CreatedNode contains information about a created node.
type CreatedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerEntryType string                 `protobuf:"bytes,1,opt,name=ledger_entry_type,json=ledgerEntryType,proto3" json:"ledger_entry_type,omitempty"` // The type of ledger entry.
	LedgerIndex     string                 `protobuf:"bytes,2,opt,name=ledger_index,json=ledgerIndex,proto3" json:"ledger_index,omitempty"`               // The ledger index of the node.
	NewFields       *CreatedNode_NewFields `protobuf:"bytes,3,opt,name=new_fields,json=newFields,proto3" json:"new_fields,omitempty"`                     // The new fields of the node.
}

func (x *CreatedNode) Reset() {
	*x = CreatedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedNode) ProtoMessage() {}

func (x *CreatedNode) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedNode.ProtoReflect.Descriptor instead.
func (*CreatedNode) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{8}
}

func (x *CreatedNode) GetLedgerEntryType() string {
	if x != nil {
		return x.LedgerEntryType
	}
	return ""
}

func (x *CreatedNode) GetLedgerIndex() string {
	if x != nil {
		return x.LedgerIndex
	}
	return ""
}

func (x *CreatedNode) GetNewFields() *CreatedNode_NewFields {
	if x != nil {
		return x.NewFields
	}
	return nil
}

// TxResult represents the result of a transaction query.
type XRPTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account            string     `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                                                    // The unique address of the account that initiated the transaction.
	Fee                string     `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`                                                            // The amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.
	Flags              uint32     `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`                                                       // The set of bit-flags for this transaction.
	LastLedgerSequence uint32     `protobuf:"varint,4,opt,name=last_ledger_sequence,json=lastLedgerSequence,proto3" json:"last_ledger_sequence,omitempty"` // The highest ledger index this transaction can appear in.
	OfferSequence      uint32     `protobuf:"varint,5,opt,name=offer_sequence,json=offerSequence,proto3" json:"offer_sequence,omitempty"`                  // The offer sequence number.
	Sequence           uint32     `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"`                                                 // The sequence number of the account sending the transaction.
	SigningPubKey      string     `protobuf:"bytes,7,opt,name=signing_pub_key,json=signingPubKey,proto3" json:"signing_pub_key,omitempty"`                 // The hex representation of the public key that corresponds to the private key used to sign this transaction.
	TakerGets          *TakerGets `protobuf:"bytes,8,opt,name=taker_gets,json=takerGets,proto3" json:"taker_gets,omitempty"`                               // The amount that the taker gets, specified in the offer.
	TakerPays          string     `protobuf:"bytes,9,opt,name=taker_pays,json=takerPays,proto3" json:"taker_pays,omitempty"`                               // The amount that the taker pays, specified in the offer.
	TransactionType    string     `protobuf:"bytes,10,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`            // The type of transaction, e.g., "OfferCreate".
	TxnSignature       string     `protobuf:"bytes,11,opt,name=txn_signature,json=txnSignature,proto3" json:"txn_signature,omitempty"`                     // The signature that verifies this transaction as originating from the account it says it is from.
	Hash               string     `protobuf:"bytes,12,opt,name=hash,proto3" json:"hash,omitempty"`                                                         // The hash of the transaction.
	Ctid               string     `protobuf:"bytes,13,opt,name=ctid,proto3" json:"ctid,omitempty"`                                                         // The currency transaction ID.
	Meta               *Meta      `protobuf:"bytes,14,opt,name=meta,proto3" json:"meta,omitempty"`                                                         // The metadata associated with the transaction.
	Validated          bool       `protobuf:"varint,15,opt,name=validated,proto3" json:"validated,omitempty"`                                              // Indicates whether the transaction is validated.
	Date               int64      `protobuf:"varint,16,opt,name=date,proto3" json:"date,omitempty"`                                                        // The timestamp of the transaction, represented as the number of seconds since the Unix epoch.
	LedgerIndex        uint32     `protobuf:"varint,17,opt,name=ledger_index,json=ledgerIndex,proto3" json:"ledger_index,omitempty"`                       // The index of the ledger that contains this transaction.
	InLedger           uint32     `protobuf:"varint,18,opt,name=in_ledger,json=inLedger,proto3" json:"in_ledger,omitempty"`                                // The ledger index where this transaction was included.
	Status             string     `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`                                                     // The status of the transaction.
	Warnings           []*Warning `protobuf:"bytes,20,rep,name=warnings,proto3" json:"warnings,omitempty"`                                                 // An array of warning objects.
}

func (x *XRPTransaction) Reset() {
	*x = XRPTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRPTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRPTransaction) ProtoMessage() {}

func (x *XRPTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRPTransaction.ProtoReflect.Descriptor instead.
func (*XRPTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{9}
}

func (x *XRPTransaction) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *XRPTransaction) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *XRPTransaction) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *XRPTransaction) GetLastLedgerSequence() uint32 {
	if x != nil {
		return x.LastLedgerSequence
	}
	return 0
}

func (x *XRPTransaction) GetOfferSequence() uint32 {
	if x != nil {
		return x.OfferSequence
	}
	return 0
}

func (x *XRPTransaction) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *XRPTransaction) GetSigningPubKey() string {
	if x != nil {
		return x.SigningPubKey
	}
	return ""
}

func (x *XRPTransaction) GetTakerGets() *TakerGets {
	if x != nil {
		return x.TakerGets
	}
	return nil
}

func (x *XRPTransaction) GetTakerPays() string {
	if x != nil {
		return x.TakerPays
	}
	return ""
}

func (x *XRPTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *XRPTransaction) GetTxnSignature() string {
	if x != nil {
		return x.TxnSignature
	}
	return ""
}

func (x *XRPTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *XRPTransaction) GetCtid() string {
	if x != nil {
		return x.Ctid
	}
	return ""
}

func (x *XRPTransaction) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *XRPTransaction) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *XRPTransaction) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *XRPTransaction) GetLedgerIndex() uint32 {
	if x != nil {
		return x.LedgerIndex
	}
	return 0
}

func (x *XRPTransaction) GetInLedger() uint32 {
	if x != nil {
		return x.InLedger
	}
	return 0
}

func (x *XRPTransaction) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *XRPTransaction) GetWarnings() []*Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Meta contains the metadata information related to a transaction.
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedNodes     []*AffectedNode `protobuf:"bytes,1,rep,name=affected_nodes,json=affectedNodes,proto3" json:"affected_nodes,omitempty"`             // The list of nodes affected by the transaction.
	TransactionIndex  uint32          `protobuf:"varint,2,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`   // The index of the transaction within the ledger.
	TransactionResult string          `protobuf:"bytes,3,opt,name=transaction_result,json=transactionResult,proto3" json:"transaction_result,omitempty"` // The result of the transaction.
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{10}
}

func (x *Meta) GetAffectedNodes() []*AffectedNode {
	if x != nil {
		return x.AffectedNodes
	}
	return nil
}

func (x *Meta) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *Meta) GetTransactionResult() string {
	if x != nil {
		return x.TransactionResult
	}
	return ""
}

// AffectedNode represents a node that was affected by the transaction.
type AffectedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//
	//	*AffectedNode_DeletedNode
	//	*AffectedNode_ModifiedNode
	//	*AffectedNode_CreatedNode
	Node isAffectedNode_Node `protobuf_oneof:"node"`
}

func (x *AffectedNode) Reset() {
	*x = AffectedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffectedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffectedNode) ProtoMessage() {}

func (x *AffectedNode) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffectedNode.ProtoReflect.Descriptor instead.
func (*AffectedNode) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{11}
}

func (m *AffectedNode) GetNode() isAffectedNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *AffectedNode) GetDeletedNode() *DeletedNode {
	if x, ok := x.GetNode().(*AffectedNode_DeletedNode); ok {
		return x.DeletedNode
	}
	return nil
}

func (x *AffectedNode) GetModifiedNode() *ModifiedNode {
	if x, ok := x.GetNode().(*AffectedNode_ModifiedNode); ok {
		return x.ModifiedNode
	}
	return nil
}

func (x *AffectedNode) GetCreatedNode() *CreatedNode {
	if x, ok := x.GetNode().(*AffectedNode_CreatedNode); ok {
		return x.CreatedNode
	}
	return nil
}

type isAffectedNode_Node interface {
	isAffectedNode_Node()
}

type AffectedNode_DeletedNode struct {
	DeletedNode *DeletedNode `protobuf:"bytes,1,opt,name=deleted_node,json=deletedNode,proto3,oneof"`
}

type AffectedNode_ModifiedNode struct {
	ModifiedNode *ModifiedNode `protobuf:"bytes,2,opt,name=modified_node,json=modifiedNode,proto3,oneof"`
}

type AffectedNode_CreatedNode struct {
	CreatedNode *CreatedNode `protobuf:"bytes,3,opt,name=created_node,json=createdNode,proto3,oneof"`
}

func (*AffectedNode_DeletedNode) isAffectedNode_Node() {}

func (*AffectedNode_ModifiedNode) isAffectedNode_Node() {}

func (*AffectedNode_CreatedNode) isAffectedNode_Node() {}

// Warning represents a warning message associated with the transaction result.
type Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // The ID of the warning.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // The warning message.
}

func (x *Warning) Reset() {
	*x = Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{12}
}

func (x *Warning) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Warning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type XRPBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             []byte   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	LedgerTransactions [][]byte `protobuf:"bytes,2,rep,name=ledgerTransactions,proto3" json:"ledgerTransactions,omitempty"`
}

func (x *XRPBlobdata) Reset() {
	*x = XRPBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRPBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRPBlobdata) ProtoMessage() {}

func (x *XRPBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRPBlobdata.ProtoReflect.Descriptor instead.
func (*XRPBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{13}
}

func (x *XRPBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *XRPBlobdata) GetLedgerTransactions() [][]byte {
	if x != nil {
		return x.LedgerTransactions
	}
	return nil
}

type XRPBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *LedgerHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*XRPTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *XRPBlock) Reset() {
	*x = XRPBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRPBlock) ProtoMessage() {}

func (x *XRPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRPBlock.ProtoReflect.Descriptor instead.
func (*XRPBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{14}
}

func (x *XRPBlock) GetHeader() *LedgerHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *XRPBlock) GetTransactions() []*XRPTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Messages for specific fields within the response.
type LedgerResponse_LedgerWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A warning message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LedgerResponse_LedgerWarning) Reset() {
	*x = LedgerResponse_LedgerWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerResponse_LedgerWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerResponse_LedgerWarning) ProtoMessage() {}

func (x *LedgerResponse_LedgerWarning) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerResponse_LedgerWarning.ProtoReflect.Descriptor instead.
func (*LedgerResponse_LedgerWarning) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{1, 0}
}

func (x *LedgerResponse_LedgerWarning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeletedNode_FinalFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account           string     `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                                                   // The account related to the node.
	BookDirectory     string     `protobuf:"bytes,2,opt,name=book_directory,json=bookDirectory,proto3" json:"book_directory,omitempty"`                  // The book directory of the node.
	BookNode          string     `protobuf:"bytes,3,opt,name=book_node,json=bookNode,proto3" json:"book_node,omitempty"`                                 // The book node of the node.
	Flags             uint32     `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`                                                      // The flags associated with the node.
	OwnerNode         string     `protobuf:"bytes,5,opt,name=owner_node,json=ownerNode,proto3" json:"owner_node,omitempty"`                              // The owner node of the node.
	PreviousTxnId     string     `protobuf:"bytes,6,opt,name=previous_txn_id,json=previousTxnId,proto3" json:"previous_txn_id,omitempty"`                // The transaction ID of the previous transaction.
	PreviousTxnLgrSeq uint32     `protobuf:"varint,7,opt,name=previous_txn_lgr_seq,json=previousTxnLgrSeq,proto3" json:"previous_txn_lgr_seq,omitempty"` // The ledger sequence of the previous transaction.
	Sequence          uint32     `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`                                                // The sequence number of the node.
	TakerGets         *TakerGets `protobuf:"bytes,9,opt,name=taker_gets,json=takerGets,proto3" json:"taker_gets,omitempty"`                              // The taker gets value of the node.
	TakerPays         string     `protobuf:"bytes,10,opt,name=taker_pays,json=takerPays,proto3" json:"taker_pays,omitempty"`                             // The taker pays value of the node.
}

func (x *DeletedNode_FinalFields) Reset() {
	*x = DeletedNode_FinalFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedNode_FinalFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedNode_FinalFields) ProtoMessage() {}

func (x *DeletedNode_FinalFields) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedNode_FinalFields.ProtoReflect.Descriptor instead.
func (*DeletedNode_FinalFields) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DeletedNode_FinalFields) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *DeletedNode_FinalFields) GetBookDirectory() string {
	if x != nil {
		return x.BookDirectory
	}
	return ""
}

func (x *DeletedNode_FinalFields) GetBookNode() string {
	if x != nil {
		return x.BookNode
	}
	return ""
}

func (x *DeletedNode_FinalFields) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *DeletedNode_FinalFields) GetOwnerNode() string {
	if x != nil {
		return x.OwnerNode
	}
	return ""
}

func (x *DeletedNode_FinalFields) GetPreviousTxnId() string {
	if x != nil {
		return x.PreviousTxnId
	}
	return ""
}

func (x *DeletedNode_FinalFields) GetPreviousTxnLgrSeq() uint32 {
	if x != nil {
		return x.PreviousTxnLgrSeq
	}
	return 0
}

func (x *DeletedNode_FinalFields) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *DeletedNode_FinalFields) GetTakerGets() *TakerGets {
	if x != nil {
		return x.TakerGets
	}
	return nil
}

func (x *DeletedNode_FinalFields) GetTakerPays() string {
	if x != nil {
		return x.TakerPays
	}
	return ""
}

type ModifiedNode_FinalFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags         uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`                                     // The flags associated with the node.
	IndexNext     string `protobuf:"bytes,2,opt,name=index_next,json=indexNext,proto3" json:"index_next,omitempty"`             // The next index of the node.
	IndexPrevious string `protobuf:"bytes,3,opt,name=index_previous,json=indexPrevious,proto3" json:"index_previous,omitempty"` // The previous index of the node.
	Owner         string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`                                      // The owner of the node.
	RootIndex     string `protobuf:"bytes,5,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`             // The root index of the node.
}

func (x *ModifiedNode_FinalFields) Reset() {
	*x = ModifiedNode_FinalFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifiedNode_FinalFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedNode_FinalFields) ProtoMessage() {}

func (x *ModifiedNode_FinalFields) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedNode_FinalFields.ProtoReflect.Descriptor instead.
func (*ModifiedNode_FinalFields) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ModifiedNode_FinalFields) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ModifiedNode_FinalFields) GetIndexNext() string {
	if x != nil {
		return x.IndexNext
	}
	return ""
}

func (x *ModifiedNode_FinalFields) GetIndexPrevious() string {
	if x != nil {
		return x.IndexPrevious
	}
	return ""
}

func (x *ModifiedNode_FinalFields) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ModifiedNode_FinalFields) GetRootIndex() string {
	if x != nil {
		return x.RootIndex
	}
	return ""
}

type CreatedNode_NewFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRate      string `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                  // The exchange rate of the node.
	RootIndex         string `protobuf:"bytes,2,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`                           // The root index of the node.
	TakerGetsCurrency string `protobuf:"bytes,3,opt,name=taker_gets_currency,json=takerGetsCurrency,proto3" json:"taker_gets_currency,omitempty"` // The currency that the taker gets.
	TakerGetsIssuer   string `protobuf:"bytes,4,opt,name=taker_gets_issuer,json=takerGetsIssuer,proto3" json:"taker_gets_issuer,omitempty"`       // The issuer of the currency that the taker gets.
	TakerPaysCurrency string `protobuf:"bytes,5,opt,name=taker_pays_currency,json=takerPaysCurrency,proto3" json:"taker_pays_currency,omitempty"` // The currency that the taker pays.
	TakerPaysIssuer   string `protobuf:"bytes,6,opt,name=taker_pays_issuer,json=takerPaysIssuer,proto3" json:"taker_pays_issuer,omitempty"`       // The issuer of the currency that the taker pays.
}

func (x *CreatedNode_NewFields) Reset() {
	*x = CreatedNode_NewFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedNode_NewFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedNode_NewFields) ProtoMessage() {}

func (x *CreatedNode_NewFields) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedNode_NewFields.ProtoReflect.Descriptor instead.
func (*CreatedNode_NewFields) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CreatedNode_NewFields) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *CreatedNode_NewFields) GetRootIndex() string {
	if x != nil {
		return x.RootIndex
	}
	return ""
}

func (x *CreatedNode_NewFields) GetTakerGetsCurrency() string {
	if x != nil {
		return x.TakerGetsCurrency
	}
	return ""
}

func (x *CreatedNode_NewFields) GetTakerGetsIssuer() string {
	if x != nil {
		return x.TakerGetsIssuer
	}
	return ""
}

func (x *CreatedNode_NewFields) GetTakerPaysCurrency() string {
	if x != nil {
		return x.TakerPaysCurrency
	}
	return ""
}

func (x *CreatedNode_NewFields) GetTakerPaysIssuer() string {
	if x != nil {
		return x.TakerPaysIssuer
	}
	return ""
}

var File_coinbase_chainstorage_blockchain_xrp_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_xrp_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x78, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x29, 0x0a, 0x0d, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x12, 0x50, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x92, 0x01, 0x0a, 0x18, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x09, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x04, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xf5, 0x02,
	0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6c, 0x67, 0x72, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x54, 0x78, 0x6e, 0x4c, 0x67, 0x72, 0x53, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x73, 0x52, 0x09, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x73, 0x22, 0x85, 0x04, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6c, 0x67, 0x72, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x54, 0x78, 0x6e, 0x4c, 0x67, 0x72, 0x53, 0x65, 0x71, 0x1a, 0x9e, 0x01, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x65, 0x78,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb3, 0x03,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a, 0x0a,
	0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x09,
	0x6e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x87, 0x02, 0x0a, 0x09, 0x4e, 0x65,
	0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x73, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x22, 0xbe, 0x05, 0x0a, 0x0e, 0x58, 0x52, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x73, 0x52, 0x09, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x78, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x74, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x74, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x0e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x4a, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x07,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x55, 0x0a, 0x0b, 0x58, 0x52, 0x50, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x58, 0x52, 0x50,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x58, 0x52, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x3f, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_xrp_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_xrp_proto_rawDescData = file_coinbase_chainstorage_blockchain_xrp_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_xrp_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_xrp_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_xrp_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_xrp_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_xrp_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_coinbase_chainstorage_blockchain_xrp_proto_goTypes = []interface{}{
	(*LedgerRequest)(nil),                // 0: coinbase.chainstorage.LedgerRequest
	(*LedgerResponse)(nil),               // 1: coinbase.chainstorage.LedgerResponse
	(*LedgerHeader)(nil),                 // 2: coinbase.chainstorage.LedgerHeader
	(*LedgerTransactionHash)(nil),        // 3: coinbase.chainstorage.LedgerTransactionHash
	(*LedgerTransactionRequest)(nil),     // 4: coinbase.chainstorage.LedgerTransactionRequest
	(*TakerGets)(nil),                    // 5: coinbase.chainstorage.TakerGets
	(*DeletedNode)(nil),                  // 6: coinbase.chainstorage.DeletedNode
	(*ModifiedNode)(nil),                 // 7: coinbase.chainstorage.ModifiedNode
	(*CreatedNode)(nil),                  // 8: coinbase.chainstorage.CreatedNode
	(*XRPTransaction)(nil),               // 9: coinbase.chainstorage.XRPTransaction
	(*Meta)(nil),                         // 10: coinbase.chainstorage.Meta
	(*AffectedNode)(nil),                 // 11: coinbase.chainstorage.AffectedNode
	(*Warning)(nil),                      // 12: coinbase.chainstorage.Warning
	(*XRPBlobdata)(nil),                  // 13: coinbase.chainstorage.XRPBlobdata
	(*XRPBlock)(nil),                     // 14: coinbase.chainstorage.XRPBlock
	(*LedgerResponse_LedgerWarning)(nil), // 15: coinbase.chainstorage.LedgerResponse.LedgerWarning
	(*DeletedNode_FinalFields)(nil),      // 16: coinbase.chainstorage.DeletedNode.FinalFields
	(*ModifiedNode_FinalFields)(nil),     // 17: coinbase.chainstorage.ModifiedNode.FinalFields
	(*CreatedNode_NewFields)(nil),        // 18: coinbase.chainstorage.CreatedNode.NewFields
}
var file_coinbase_chainstorage_blockchain_xrp_proto_depIdxs = []int32{
	15, // 0: coinbase.chainstorage.LedgerResponse.warnings:type_name -> coinbase.chainstorage.LedgerResponse.LedgerWarning
	2,  // 1: coinbase.chainstorage.LedgerResponse.ledger_header:type_name -> coinbase.chainstorage.LedgerHeader
	3,  // 2: coinbase.chainstorage.LedgerResponse.transactions:type_name -> coinbase.chainstorage.LedgerTransactionHash
	3,  // 3: coinbase.chainstorage.LedgerHeader.transactions:type_name -> coinbase.chainstorage.LedgerTransactionHash
	16, // 4: coinbase.chainstorage.DeletedNode.final_fields:type_name -> coinbase.chainstorage.DeletedNode.FinalFields
	17, // 5: coinbase.chainstorage.ModifiedNode.final_fields:type_name -> coinbase.chainstorage.ModifiedNode.FinalFields
	17, // 6: coinbase.chainstorage.ModifiedNode.previous_fields:type_name -> coinbase.chainstorage.ModifiedNode.FinalFields
	18, // 7: coinbase.chainstorage.CreatedNode.new_fields:type_name -> coinbase.chainstorage.CreatedNode.NewFields
	5,  // 8: coinbase.chainstorage.XRPTransaction.taker_gets:type_name -> coinbase.chainstorage.TakerGets
	10, // 9: coinbase.chainstorage.XRPTransaction.meta:type_name -> coinbase.chainstorage.Meta
	12, // 10: coinbase.chainstorage.XRPTransaction.warnings:type_name -> coinbase.chainstorage.Warning
	11, // 11: coinbase.chainstorage.Meta.affected_nodes:type_name -> coinbase.chainstorage.AffectedNode
	6,  // 12: coinbase.chainstorage.AffectedNode.deleted_node:type_name -> coinbase.chainstorage.DeletedNode
	7,  // 13: coinbase.chainstorage.AffectedNode.modified_node:type_name -> coinbase.chainstorage.ModifiedNode
	8,  // 14: coinbase.chainstorage.AffectedNode.created_node:type_name -> coinbase.chainstorage.CreatedNode
	2,  // 15: coinbase.chainstorage.XRPBlock.header:type_name -> coinbase.chainstorage.LedgerHeader
	9,  // 16: coinbase.chainstorage.XRPBlock.transactions:type_name -> coinbase.chainstorage.XRPTransaction
	5,  // 17: coinbase.chainstorage.DeletedNode.FinalFields.taker_gets:type_name -> coinbase.chainstorage.TakerGets
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_xrp_proto_init() }
func file_coinbase_chainstorage_blockchain_xrp_proto_init() {
	if File_coinbase_chainstorage_blockchain_xrp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerTransactionHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakerGets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifiedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRPTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffectedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRPBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRPBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerResponse_LedgerWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedNode_FinalFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifiedNode_FinalFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedNode_NewFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*AffectedNode_DeletedNode)(nil),
		(*AffectedNode_ModifiedNode)(nil),
		(*AffectedNode_CreatedNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_xrp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_xrp_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_xrp_proto_depIdxs,
		MessageInfos:      file_coinbase_chainstorage_blockchain_xrp_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_xrp_proto = out.File
	file_coinbase_chainstorage_blockchain_xrp_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_xrp_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_xrp_proto_depIdxs = nil
}
