package xrp

import (
	"context"
	"encoding/json"
	"github.com/coinbase/chainstorage/internal/blockchain/client/internal"
	"github.com/coinbase/chainstorage/internal/blockchain/jsonrpc"
	jsonrpcmocks "github.com/coinbase/chainstorage/internal/blockchain/jsonrpc/mocks"
	"github.com/coinbase/chainstorage/internal/blockchain/parser"
	"github.com/coinbase/chainstorage/internal/blockchain/restapi"
	"github.com/coinbase/chainstorage/internal/dlq"
	"github.com/coinbase/chainstorage/internal/utils/testapp"
	"github.com/coinbase/chainstorage/protos/coinbase/c3/common"
	"github.com/stretchr/testify/suite"
	"go.uber.org/fx"
	"go.uber.org/mock/gomock"
	"strconv"
	"testing"
)

const (
	Tag uint32 = 2

	XRP_LEDGER_RESPONSE_1 = `
	{"result":{"ledger_hash":"F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C","ledger_index":87343600,"validated":true,"ledger":{"account_hash":"9EF1C655DB660F3C2F646B1C9484DDE889A6DC12159F514EBAE903BC1DF3BFE2","close_flags":0,"close_time":766564672,"close_time_human":"2024-Apr-16 06:37:52.000000000 UTC","close_time_resolution":10,"close_time_iso":"2024-04-16T06:37:52Z","ledger_hash":"F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C","parent_close_time":766564671,"parent_hash":"71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491","total_coins":"99987669931111675","transaction_hash":"530749D5ED0A34795108AD76D8617979BDE86AC2D0640B382CF93D0C2C050666","ledger_index":"87343600","closed":true,"transactions":["04FBB0C7A704D3226B90933C2C41198435577F19FE803ED7036CCF9658A5E529","06B1F1035601639B87B1638E9FA3B306A0A542614C16C325CDDF6BEC2D54F2F3","0B3FF2924B40F4CEF3CA8B586F2FE6C160B006E888FC502E42F01A02F11A0597","0E229C0B623C8C534D233A719F4D69F18E42854B5396BD4CDCCEC306CCB53C74","1CDF0D2E7001E583A56915F19ECF3966591886BC5357D72DE0551D7374C61ED6","1F0548011F1F93823D0AD497324B3AF4188860FF69F1196E6EEC459A9E675403","28FA467E547DB74F57FE973576FFED6969BBAF6AB2E33C2D45D8A8AE325396F5","2CF9D249B85EA8FA8D2D1C04E0708D45BB5040A312416C363A1FE06BBE8878FF","3DBC85455587C41952302107E685A7CF17E0FD6E113DDD7991A5224A89DEB379","408382ED71E9284F48E2D1C069F07DB470190DFDCBBCD6AD8B4EAF12E09D53EB","4D718C8D26BCCD44D813172D47DB814EE03F07AF56C9584B8039E44B4D797252","4E44212AB963FB8B59AE62084AC43B92B536FA0660767F61290AEBA2A3EDBB64","5000F3F33D161F3B526A2E9CDB2E013B0EB216B1F97D537FB3A59B1256543DCC","52ECDC7A1C1B1B0CC8041C6AABD24581CE459ED2CA058A0B4399A5843FD6F1ED","602523C5EAE2D56CEBB2B28F972C53D741D7FAF00821877ABBA294AAF85DD8A9","6DF90154AD09226E914FC76AB5E7F576A91DB7DAF592CDFE35A60AE169323154","74BC621E741B78CD218BA525AC3C16AD04018F251470610784FC18A3D672D4CA","7D5E66FF9AD5B1FB6D8FD0C8DDC78E310E119B8414E4CC4A0244E93F16D0DA86","8774989F9D48B4E336F0B3773D5AD40B90183DFE37BD72D0E059C085E9D7D398","8AD28C27299ADE297008F8AC3D36DF94EE24FD9821B0869A41666FCC067A6130","8E1A13C16E54046826EAF9AF0A04884BFFE7DC6CE5A3400F3136B78CAEC18736","8E73D8652C27E08B54FE43F28BBE239CE6B78E9084FC678E1EBA78C9AA432A73","9514AAA4234DD698F2350E00868F4C997900C11A8A6894EC79C22455535F6F04","9A77B673D7A68F81B04AD82CCAF548A480656FE5782AEBE9C1601F7BB61F4C6A","9D2C44BE5938FFC9A7B196429F05F697045F345B8F38F9C476AE121A99BE67E0","A1000D02BC2049AA4B21347C46484FE86CD93EAAE780571EEAE17B7F7210A872","A68482EFE747CC82915114C3DC7F6853698CBDCDC0CBA1B414B0E45E50DD2F45","A72D6A675AAC954C52960678928F5326249F7F3794E1C63D74EE5758751CFCB7","AC777395D876365B6644EE56E03B1B61C4C3D4C154B15F383475B2A9F629199C","B07634CE65F476FA753A2E1BB35154B419DA56A2CBC842448CAF9B143CC21208","B410C0490302255120E26962CF034E68C95D69660B51CB60D54A54A27729B06F","B5E857618C951700372B0F7BF628C21F31A14FE1FBD38099EC66084E0608FE56","D1303599968DDDD6CCCBCFB5C928CD8064A1DE45293B1E0E5040620B0FB119F1","DF70E31879254A3376B51C620446354CED51864A7C3B1F6873CD167C1EF28A11","E42E76CD64FE0FA2A198F6C80B46FB432B0A9B80F3F2847E35FFDD43041055A6","E5025ABA7A4C70C206E93AF5DA6EAE6A86AC577590036B79E884CC0BABCA45E5","E6B287DE6AF1E94F53162A9A858C126F4C703D5EB201CE03EF1311F92D9580E1","EA0177229C4E84C21FAE2DFD193FB638A2AF7E34799A0AA4481E675C5EF1F94E","ED02DB85ACF16AFB339822EC2A78B908718E6B2B8927E1B65F7E38549BEE50D6","F0AF523693C14952513AA66C5CA054E8C7B83959BEEC49996AEEEBC3B0CFFF7B","F0BD412B498098FCCB784EBA595F7781AAF16762EE4AC788E583AC509140AD22","F360D24017FFC186D665A439BC1704027CDAD15F42B47070E5E8C19DE1E7AA10","F3EEDB1A288C9007C609127B769646482427ADCA95CAB31D8E6D85C0C5CC42F3","F7527CDD1BD74C08DB83F689047F011602B24FEB1944BD4DB9E27CE6DBD266D9","FBA83A5C3E59ACB01DC15613600168A76A0CC553075E5D139D60B9B97375E1D8"]},"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}		
   `
	XRP_LEDGER_RESPONSE_2 = `
	{"result":{"ledger_hash":"71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491","ledger_index":87343599,"validated":true,"ledger":{"account_hash":"2107DBB652150B07F33A4ACA146572E927186DDA1D55C0DF28F276ED3ECC366A","close_flags":0,"close_time":766564671,"close_time_human":"2024-Apr-16 06:37:51.000000000 UTC","close_time_resolution":10,"close_time_iso":"2024-04-16T06:37:51Z","ledger_hash":"71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491","parent_close_time":766564670,"parent_hash":"06166565810F18257361C008DF0A9EA8811EADDC5848FCBCAD43CBA702619523","total_coins":"99987669931134284","transaction_hash":"D18B47575E58FE5E2B6DDBB284EC95D74368CB24B05B9DDA1403D2BB368F86A3","ledger_index":"87343599","closed":true,"transactions":["05D0978447EE4096C9B718D878524C6C3813467EE8AB36ED2F0DD27FFE9D668C","08A174CF6E0F09F074CB5C051218BF8BC59C06C60FF6F8E4FD9A8FCCDAD76F27","09864E446C29C9B980B6D2F46F9817EF8EB500A2F8A58BBA945AEC5323EECC02","0C94FD7844828BA3485E6BA0F3EB976855101B9E616EDECAB0B960037AD989DC","0EEDDE26DCA3AB591A6927CB0814F334DC568BE69988E8A96721557AE7F77BB2","14CAFBB94EA0D2CFDE2EA4FA9E835D8CF922C9F132EB0824C4DB226A821DB927","24A83916B570F628C444B596AAEF2BF31772A53527741960E47D2CAEEE938040","24E658CFF9FA733EB6A1027F83F71BBC664B6EC09C13DD1E918AB138F40E2D96","26B39D67728C2988EF9899301AF4157CDFD94083C86537F53C5A1BD01E698FBC","2E43C1E222CDB54D73085104EB7C753379225BB84F52F31D91639ED4A8BF5BFB","33641F8B6EFC4137FBA2D947FC7F630663EADB00E6E1F76D92D68F0404216486","3892E9BD79623E7ADACE9EAD287106E9274AFED6742DC45ED4512482A8A6DC64","3A3E9760005690C58D75063CBF376E339E3D8EA26859262C9545855A46B7888F","3BB7D207C80D913F1E41FBCEE6150AC235204488A809DF64A8133E1A2D19F075","46335F7ACF6A04016E75633CDB0DFDD2CBDB3C47B508FCC1495F7D2C13435243","48065C7FFB2BB12C26DF34617C6DA58469BF703F8EADD8E6AF234F037ABD2C02","4F3AC4CC84D1EF6C35CCDA92A1AF49A584F97CDC42C1D2C64D6FA62055B33549","56EBB4D3300008F54CB3CBCB555C053E82CBF2BC50783AA29E8473C97BAA662D","5BFC8DEF261451DEB42E502E4EE5D5B14DBE9198466B193D691D19DFFA953808","649B1692A186F3F50F6FDAF620473BB7F2F229159713B4523FD1311539BF9A4A","6BD1993EE42EF0DE6002E38614D287CC611A37AD2E53BE91992EB1F2FCA7A767","6BDA8C5D75304878A6D575296799F36D1BECDCDD528F22430C4FB5FC4432EE45","6D69E22D78E7F3D2E150C1EC6FB8D8AC6737152E2C3E196A3DBA5DE982B78044","78410CBEB0343E49B0DCFACB19955975D97BAF53A5942060580BA9C663B564F9","7EA1AA2DE360183156B0216AC5FFCFC2AC2EF11F17E331AAD03D4616621D1CA3","80BBCD0C6A0B21E255A214BE5D0ED283BCFB01759FE593113013A2FD4CC08A7D","8743438180A84558BDD912AA916EB429BD2108784032BAF3C54493C72EFA460C","89B5318DC258D84E1280114B01B7CD50897AAC44081861207E4E9497776FB3E4","92A52D3494D95B214966F9527E749A421FA1E1D97AF3E9ADAF35F3AC2BE58EC1","93A6D567D1B79F01ED2EF25D2F127F02D1ECD3123E5DBD7ABBC0418171C93E57","960EF8BA3B7357A9A58ED7D4A3FA295F6060454B6C6A1A79E720D91C6767FE2F","964B8DFE2205B88DA4ACC7EEEFC244FBA84CD71987937099AFCA59A43A8804DC","A33D9CDBF9CEBA1FC65DD4B5FF71F87B30FC223B15E881AD9B8C2E91493C1923","A3AD1CEFFF20230E1DCC560311E6E209F6034E239A65FA5F04BC3166C4DA778F","AAEEB323C61CDAD5D5EDF4F1F48056A877D0D0C3D6ED4D7F09B71DB2F29EAA04","AF41A38C07F5BF9FE6BFD9D034E65BEA5378446FED9EFF0C0C49A3C6660AD1BD","AFE6FE69E5D2DEF20E4CE1EA98196012B25794C0FC7CA9060EE19F7563F7AA4E","B10EA0BF097D53075A86FA09470C8453A6EA31A5445C9D1D85B0A97F58D17C62","BC417FC741F74C8C4F9F59156A1ED033DD1D3ABCDF895E371693ACD4970CB431","C4B6C3DE4B3CC1DF39C43BD76AEEDE93364D57C3E4A18F206EE433B73B855062","C5DFF39B8B1409C9A135260DB3D5FFF1FDF8397E1A76F67CAFCA783B8D053E19","C911303D4A86CCFDAC4FDA83338EC7C213A71038158B86EEE65326553F4DBE2D","CD545EB8E7F4311D6DFB49FD51B03E8AB25E85593EE272229580C7D2F982B4ED","CED3F721892A96F8EC0C20652134D0E28A1ECFA48CCB5C53469455D42A032FC6","D2279BFAF152EA492281986C248E01F1047ED1193BA4F0FD5E15EFAEADD54421","D75AA7EDEAB92F3D90CDF2B02E43638F350497B58245C41205773B65F763BE4F","E2067F3CBC40B603B1E25D98CD6765A81F435EFBBF9DECC9B4704AB85C320FEC","E37CA0B0B075D9072FAE02B9410B0E1CEE5543E722AFC633DCE45170321359DC","E7E03DA763DA112D5ABFEE4260C1463F99F469522D610D34EB6BC0E43C3660B6","E8AD479384AD886CCBA232267C3B09085AE7B852981D4846C89274F1835ED73D","F218B6F40F7A12870E1BD2C3472660699DF8851B3AFF07011ED01D530763B001","F2553008493C62B33433E89A90A54AE687CE7CDE96C1A48C2CEA146FA5CAB6CA","F7642FE2F7690A8A63C9BD5E9EBD4AFB685681CD1616115CA9465B6B9005BAA9","FF80411285D95CA826632D819E3D7688875ED8FFA167379A6AEBFDA6E176AB67"]},"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"},{"id":2002,"message":"This server may be out of date"}]}
	`

	XRP_LEDGER_RESPONSE_3 = `
	{"result":{"ledger_hash":"06166565810F18257361C008DF0A9EA8811EADDC5848FCBCAD43CBA702619523","ledger_index":87343598,"validated":true,"ledger":{"account_hash":"D3F9EC82D8E4697348972D0730564541A60AFA9CCDCEA336315D929E80E53DEF","close_flags":0,"close_time":766564670,"close_time_human":"2024-Apr-16 06:37:50.000000000 UTC","close_time_resolution":10,"close_time_iso":"2024-04-16T06:37:50Z","ledger_hash":"06166565810F18257361C008DF0A9EA8811EADDC5848FCBCAD43CBA702619523","parent_close_time":766564661,"parent_hash":"A6B59BB47B36B8257912337D84F46CD4724274127B3A1B74B084C0BED28C4A4C","total_coins":"99987669931156989","transaction_hash":"BBB2A7CE5B91339E8CEBD9036FB7FC4802339B5345BBA39E52CA2FF39DC1217F","ledger_index":"87343598","closed":true,"transactions":["01510C0C5139D2F9B1AA57B4D4D13460BC806E506287D27F2AD2BB4878D8D971","0F70679EB46C20B1CE82239EEBA675B8F711E6D26E6EFB1A901894D3F4430711","176616D24F9F3907384DD3721745720298000E32F6C3F796AE37E94C87AB3F98","235EA53C6A885D9771D24FB3449F92AE3D1AC139024784C1A77B5270A95D2273","2C41DC91392AE9B6F6CADBF6C7B630A45A325F52A69C855CE4D13579E5004ED6","2D042B2C34DEB0D9EC689532D9E69635938D0E8412EBE424B98765C23BFB77B8","3779A83051A8695F400B8F78412893B95CA98A01EEAE2C493D85FF7FF57E2C04","38257CB025C8964855460FB231A227D8A1EF3682677FF0A557BA28F65400CC64","3B78B9C75E819D5D93636DD8F740FFAE5C53223424B3C6CC13F0AC6E1225D627","3F35075E180C40501E03A9C01EF4B8F6E78ABCB2CC8E370B511E035CF5E74CF2","40FC0C10272CAE09BF56FDEDA248240CA987A78F57F36050EF3C8F730698E1D9","450A4B0C8B3BAE02854EE7411407FC674DBDA9E2C13497CF16678622F28A692D","465A15537C577EBD80AE45E62174EE3E0D25F041A06DD9945FAEB902A6B6DF35","4AE635659A50A879BCF280CAC173A679F1EFC153342E9B422A51651DE8D5AA64","4B570D46BDC7344DEFC5FF915CEF5DDB4576C776D7A13618AEA27E07FE08FB01","4C4B71E4D0469DE0D1C89D0A3E6FC99EC3A50B6AFAFE2DC2E142DCFDBA01E910","652885326BB4B4AD5BB3AB8CF01E08C8BB7C80338D76C9FD14F69D9EDC72B96F","69025CC56889D88F1FF83E51527E9EF08ADC0D8E0E17E51CCAD786968B56A114","6B01B2A0517606F50F98FB97B47CA1A696401532A1AFD6BEA30FEBC3AA0243BA","70F24396143AF65C8300810F3953C33E8E7E276CE32687C6816561943CD7E6B9","75B80F2497DA69AB029C83BB7BF4A2FDA8744C471BA3F9DDE6378F30659B9515","75BD0AEB26FD9F569AD308157BD7DD5E45A1CA705714C4D5CBCA24D3BF041B46","83EEA085BF61944481FC1FB0533441D693529B63729248AC93C6B5C482BD7917","88D3469AFA8AE0F417A1C144B47FE613190FBEF3A52C9E53AACD5A3E9DE4B23C","8E414C00D432387DE96412C51DAB9A29195DCDF0C64F4E8161CB484500718599","90EC63E37D8A2D9D6AE83311B624798E14C8322F3C6172B94EF38A710187F88A","9D60D4B1D40470F027E3AB5AB28D4ACF2241433EE4D167D6E0C6D8715D592DED","9E1090C7543F91E29E5DD2C3B011488DDA3C061D221895D702956D02C6398A81","A821D6787B6B78837746673A908105A7885674A20BC3859FD7A1909B5FFEE638","AA3132EBDF435E77F3014DA3C5E38FDB18F3B6642F033305053BA024F497DC28","B2D87B7ECBD866B4707A21B54ED367589961C727C5E891BB8E90EC0F69FEB526","B57C23C4C19688097547E2F4111E35642689C8B98A4EEAAFD462C3C88D7F757B","BA88A364B19858731FC263E66164CFEC14EA224F51D577ED5665DA5CB6DCB115","BD0A04BF22DDDFFA37139A550C1343F8F2931911077F75C8614919C50401235D","C348DABF6E1714B21C8850A623D73FDF3F5F5D68563969D351935D9DF14F4886","C58D9FCDC7EB41013889D188B3DCAA689BF22B915CB2DE2B50D5D33E6923B203","CA640BF165D2387475193FB8402ED6A4ADA59A862A1CDF2495C8CCFB7DCA4A36","CF6DE1A554025F27A965C6771D9AFF1CDB35C8F074608788009AFC35CA3F7A6A","D2AA7A9AF3C266417DBD690ACE4685E34E4DCE694BF5D91E8ECC245052ACB1A8","DC108F8D1A2AD5CC6F1F9C3F067C6D6BC791A0B4C901B4BB66D8781BE5FE2153","E0B4A48D08DA403A6F179A402108D2D0715759259CFBC53E83261C64833BAA3A","E440E3954E7217FFCF1D3C8272C11530652A2BE008D4DD31BF4AC3CF72282DDC","E7102542280C6B1B770221E4EF23725CF515648FFF4C8424C54CB9C00F3DA5D4","EB4F4B708C079484BA01A82766D9F53784A2729635F3E919BFB4CF34504B7551","EE43BBD4C5CA09AEB4C7BC5FFF0DF2A6FCC4FC397AC93CC5335D17DEB8AAF921","F52C9C0D66216D80DF3753EF4FD2E6DB76E9A0FBD5A5C48A8D07BB1F8AB65DDC","FB41C63FD95D849357A48AB5BFA737883688836736A23F311FA1319663F89014"]},"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}
	`
	XRP_EMPTY_LEDGER       = ``
	XRP_EMPTY_TRANSACTIONS = `
		{"result":{"ledger_hash":"F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C","ledger_index":87343600,"validated":true,"ledger":{"account_hash":"9EF1C655DB660F3C2F646B1C9484DDE889A6DC12159F514EBAE903BC1DF3BFE2","close_flags":0,"close_time":766564672,"close_time_human":"2024-Apr-16 06:37:52.000000000 UTC","close_time_resolution":10,"close_time_iso":"2024-04-16T06:37:52Z","ledger_hash":"F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C","parent_close_time":766564671,"parent_hash":"71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491","total_coins":"99987669931111675","transaction_hash":"530749D5ED0A34795108AD76D8617979BDE86AC2D0640B382CF93D0C2C050666","ledger_index":"87343600","closed":true,"transactions":[]},"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}
	`
	XRP_FEW_TRANSACTIONS = `
	{"result":{"ledger_hash":"F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C","ledger_index":87343600,"validated":true,"ledger":{"account_hash":"9EF1C655DB660F3C2F646B1C9484DDE889A6DC12159F514EBAE903BC1DF3BFE2","close_flags":0,"close_time":766564672,"close_time_human":"2024-Apr-16 06:37:52.000000000 UTC","close_time_resolution":10,"close_time_iso":"2024-04-16T06:37:52Z","ledger_hash":"F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C","parent_close_time":766564671,"parent_hash":"71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491","total_coins":"99987669931111675","transaction_hash":"530749D5ED0A34795108AD76D8617979BDE86AC2D0640B382CF93D0C2C050666","ledger_index":"87343600","closed":true,"transactions":["04FBB0C7A704D3226B90933C2C41198435577F19FE803ED7036CCF9658A5E529","06B1F1035601639B87B1638E9FA3B306A0A542614C16C325CDDF6BEC2D54F2F3","0B3FF2924B40F4CEF3CA8B586F2FE6C160B006E888FC502E42F01A02F11A0597"]},"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}
	`

	XRP_TRANSACTION_RESPONSE_1 = `
	{"result":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","Fee":"20","Flags":0,"LastLedgerSequence":87343602,"OfferSequence":133080085,"Sequence":133080094,"SigningPubKey":"0253C1DFDCF898FE85F16B71CCE80A5739F7223D54CC9EBA4749616593470298C5","TakerGets":{"currency":"5553445400000000000000000000000000000000","issuer":"rcvxE9PS9YBwxtGg1qNeewV6ZB3wGubZq","value":"95375.0832"},"TakerPays":"200000000000","TransactionType":"OfferCreate","TxnSignature":"304402202ACD08918DB308C6810B86E1C2A950E99822CC719B82BA995C39A50ADB62A21D02203D82501A9D0C5342BA03675B1EE05439423F15B7BA0D22B325167683BDE5AA21","hash":"04FBB0C7A704D3226B90933C2C41198435577F19FE803ED7036CCF9658A5E529","ctid":"C534C1F0001D0000","meta":{"AffectedNodes":[{"DeletedNode":{"FinalFields":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","BookDirectory":"799BECD7CA247A0647749B9C316898DD239A2C414C27A19C5B077337A59A7F68","BookNode":"0","Flags":0,"OwnerNode":"0","PreviousTxnID":"8E414C00D432387DE96412C51DAB9A29195DCDF0C64F4E8161CB484500718599","PreviousTxnLgrSeq":87343598,"Sequence":133080085,"TakerGets":{"currency":"5553445400000000000000000000000000000000","issuer":"rcvxE9PS9YBwxtGg1qNeewV6ZB3wGubZq","value":"95373.99519999999"},"TakerPays":"200000000000"},"LedgerEntryType":"Offer","LedgerIndex":"09E68C8FF4BD379C4555AB4FA0EB64726E0053FA18D2B1A6904FD7375610D301"}},{"ModifiedNode":{"FinalFields":{"Flags":0,"IndexNext":"0","IndexPrevious":"0","Owner":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","RootIndex":"0A2600D85F8309FE7F75A490C19613F1CE0C37483B856DB69B8140154C2335F3"},"LedgerEntryType":"DirectoryNode","LedgerIndex":"0A2600D85F8309FE7F75A490C19613F1CE0C37483B856DB69B8140154C2335F3"}},{"ModifiedNode":{"FinalFields":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","Balance":"41044622092","Flags":0,"OwnerCount":14,"Sequence":133080095},"LedgerEntryType":"AccountRoot","LedgerIndex":"1ED8DDFD80F275CB1CE7F18BB9D906655DE8029805D8B95FB9020B30425821EB","PreviousFields":{"Balance":"41044622112","Sequence":133080094},"PreviousTxnID":"06B1F1035601639B87B1638E9FA3B306A0A542614C16C325CDDF6BEC2D54F2F3","PreviousTxnLgrSeq":87343600}},{"CreatedNode":{"LedgerEntryType":"DirectoryNode","LedgerIndex":"799BECD7CA247A0647749B9C316898DD239A2C414C27A19C5B07733213C0B010","NewFields":{"ExchangeRate":"5b07733213c0b010","RootIndex":"799BECD7CA247A0647749B9C316898DD239A2C414C27A19C5B07733213C0B010","TakerGetsCurrency":"5553445400000000000000000000000000000000","TakerGetsIssuer":"06CB988E900D81BAE9217E6FE6B60CD2DDA12767"}}},{"DeletedNode":{"FinalFields":{"ExchangeRate":"5b077337a59a7f68","Flags":0,"RootIndex":"799BECD7CA247A0647749B9C316898DD239A2C414C27A19C5B077337A59A7F68","TakerGetsCurrency":"5553445400000000000000000000000000000000","TakerGetsIssuer":"06CB988E900D81BAE9217E6FE6B60CD2DDA12767","TakerPaysCurrency":"0000000000000000000000000000000000000000","TakerPaysIssuer":"0000000000000000000000000000000000000000"},"LedgerEntryType":"DirectoryNode","LedgerIndex":"799BECD7CA247A0647749B9C316898DD239A2C414C27A19C5B077337A59A7F68"}},{"CreatedNode":{"LedgerEntryType":"Offer","LedgerIndex":"EC91483E9C4DB8ADB40D982C4A0D15E5BC0706C9AA7FA63BEDE06DCD09870D59","NewFields":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","BookDirectory":"799BECD7CA247A0647749B9C316898DD239A2C414C27A19C5B07733213C0B010","Sequence":133080094,"TakerGets":{"currency":"5553445400000000000000000000000000000000","issuer":"rcvxE9PS9YBwxtGg1qNeewV6ZB3wGubZq","value":"95375.0832"},"TakerPays":"200000000000"}}}],"TransactionIndex":29,"TransactionResult":"tesSUCCESS"},"validated":true,"date":766564672,"ledger_index":87343600,"inLedger":87343600,"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}
	`

	XRP_TRANSACTION_RESPONSE_2 = `
	{"result":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","Fee":"20","Flags":0,"LastLedgerSequence":87343602,"OfferSequence":133080084,"Sequence":133080093,"SigningPubKey":"0253C1DFDCF898FE85F16B71CCE80A5739F7223D54CC9EBA4749616593470298C5","TakerGets":"40944000000","TakerPays":{"currency":"5553444300000000000000000000000000000000","issuer":"rcEGREd8NmkKRE8GE424sksyt1tJVFZwu","value":"20250.104114832"},"TransactionType":"OfferCreate","TxnSignature":"30450221009C1D8666332A3752A38CD6EE1BEF018974297F3A196FEAB04CCFFB3784D74FBE02206684558462DF11CAEB0C2057E66CEA10BA3C5C3C8E2085B0ACA15247C3F8C6A5","hash":"06B1F1035601639B87B1638E9FA3B306A0A542614C16C325CDDF6BEC2D54F2F3","ctid":"C534C1F0001C0000","meta":{"AffectedNodes":[{"ModifiedNode":{"FinalFields":{"Flags":0,"IndexNext":"0","IndexPrevious":"0","Owner":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","RootIndex":"0A2600D85F8309FE7F75A490C19613F1CE0C37483B856DB69B8140154C2335F3"},"LedgerEntryType":"DirectoryNode","LedgerIndex":"0A2600D85F8309FE7F75A490C19613F1CE0C37483B856DB69B8140154C2335F3"}},{"ModifiedNode":{"FinalFields":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","Balance":"41044622112","Flags":0,"OwnerCount":14,"Sequence":133080094},"LedgerEntryType":"AccountRoot","LedgerIndex":"1ED8DDFD80F275CB1CE7F18BB9D906655DE8029805D8B95FB9020B30425821EB","PreviousFields":{"Balance":"41044622132","Sequence":133080093},"PreviousTxnID":"74BC621E741B78CD218BA525AC3C16AD04018F251470610784FC18A3D672D4CA","PreviousTxnLgrSeq":87343600}},{"DeletedNode":{"FinalFields":{"ExchangeRate":"4e11922ac118f080","Flags":0,"RootIndex":"33DFFDF31565C801C27B84E5A0202D944687663C0BDCD0144E11922AC118F080","TakerGetsCurrency":"0000000000000000000000000000000000000000","TakerGetsIssuer":"0000000000000000000000000000000000000000","TakerPaysCurrency":"5553444300000000000000000000000000000000","TakerPaysIssuer":"06AA7798F7A8FA6914CC1E82C556E5B0A0CCB9E3"},"LedgerEntryType":"DirectoryNode","LedgerIndex":"33DFFDF31565C801C27B84E5A0202D944687663C0BDCD0144E11922AC118F080"}},{"CreatedNode":{"LedgerEntryType":"DirectoryNode","LedgerIndex":"33DFFDF31565C801C27B84E5A0202D944687663C0BDCD0144E11922EF7F10580","NewFields":{"ExchangeRate":"4e11922ef7f10580","RootIndex":"33DFFDF31565C801C27B84E5A0202D944687663C0BDCD0144E11922EF7F10580","TakerPaysCurrency":"5553444300000000000000000000000000000000","TakerPaysIssuer":"06AA7798F7A8FA6914CC1E82C556E5B0A0CCB9E3"}}},{"CreatedNode":{"LedgerEntryType":"Offer","LedgerIndex":"75711FE504AC015A4F8D11C936FA9B9654A777646070571BC3F3DD19644EC88B","NewFields":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","BookDirectory":"33DFFDF31565C801C27B84E5A0202D944687663C0BDCD0144E11922EF7F10580","Sequence":133080093,"TakerGets":"40944000000","TakerPays":{"currency":"5553444300000000000000000000000000000000","issuer":"rcEGREd8NmkKRE8GE424sksyt1tJVFZwu","value":"20250.104114832"}}}},{"DeletedNode":{"FinalFields":{"Account":"rBTwLga3i2gz3doX6Gva3MgEV8ZCD8jjah","BookDirectory":"33DFFDF31565C801C27B84E5A0202D944687663C0BDCD0144E11922AC118F080","BookNode":"0","Flags":0,"OwnerNode":"0","PreviousTxnID":"75BD0AEB26FD9F569AD308157BD7DD5E45A1CA705714C4D5CBCA24D3BF041B46","PreviousTxnLgrSeq":87343598,"Sequence":133080084,"TakerGets":"40944000000","TakerPays":{"currency":"5553444300000000000000000000000000000000","issuer":"rcEGREd8NmkKRE8GE424sksyt1tJVFZwu","value":"20250.030006192"}},"LedgerEntryType":"Offer","LedgerIndex":"9547573F2410F92CD677EC83E0F56B409D9362FDF8191BC69ADF52AD80A867A4"}}],"TransactionIndex":28,"TransactionResult":"tesSUCCESS"},"validated":true,"date":766564672,"ledger_index":87343600,"inLedger":87343600,"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}
	`

	XRP_TRANSACTION_RESPONSE_3 = `
	{"result":{"Account":"r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu","Fee":"15","Flags":0,"LastLedgerSequence":87343602,"OfferSequence":141402324,"Sequence":141402328,"SigningPubKey":"02C69C9DDEE86B0DC46DA4115709C96379E3A67D2026D5FAEE9C56F6E74490DA2B","TakerGets":{"currency":"CNY","issuer":"rJ1adrpGS3xsnQMb9Cw54tWJVFPuSdZHK","value":"30623.83329735684"},"TakerPays":"8701262774","TransactionType":"OfferCreate","TxnSignature":"30450221008F46D393ADB335A61103825E2BA40EE10C047F0203DEAC790401B0CB38ACEC300220248E7D2A242D47B0EEB698A2B4702AC9EE40AD8D27F64B142B59A2727A0AD73C","hash":"0B3FF2924B40F4CEF3CA8B586F2FE6C160B006E888FC502E42F01A02F11A0597","ctid":"C534C1F0000A0000","meta":{"AffectedNodes":[{"CreatedNode":{"LedgerEntryType":"Offer","LedgerIndex":"08DB0199B0520D315925C58CF171E62A5153B20D988C68B16B3955AC931991AB","NewFields":{"Account":"r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu","BookDirectory":"1AC09600F4B502C8F7F830F80B616DCB6F3970CB79AB70975A0A182E4CF2AF00","Sequence":141402328,"TakerGets":{"currency":"CNY","issuer":"rJ1adrpGS3xsnQMb9Cw54tWJVFPuSdZHK","value":"30623.83329735684"},"TakerPays":"8701262774"}}},{"DeletedNode":{"FinalFields":{"ExchangeRate":"5a0a17219d4dec23","Flags":0,"RootIndex":"1AC09600F4B502C8F7F830F80B616DCB6F3970CB79AB70975A0A17219D4DEC23","TakerGetsCurrency":"000000000000000000000000434E590000000000","TakerGetsIssuer":"0360E3E0751BD9A566CD03FA6CAFC78118B82BA0","TakerPaysCurrency":"0000000000000000000000000000000000000000","TakerPaysIssuer":"0000000000000000000000000000000000000000"},"LedgerEntryType":"DirectoryNode","LedgerIndex":"1AC09600F4B502C8F7F830F80B616DCB6F3970CB79AB70975A0A17219D4DEC23"}},{"CreatedNode":{"LedgerEntryType":"DirectoryNode","LedgerIndex":"1AC09600F4B502C8F7F830F80B616DCB6F3970CB79AB70975A0A182E4CF2AF00","NewFields":{"ExchangeRate":"5a0a182e4cf2af00","RootIndex":"1AC09600F4B502C8F7F830F80B616DCB6F3970CB79AB70975A0A182E4CF2AF00","TakerGetsCurrency":"000000000000000000000000434E590000000000","TakerGetsIssuer":"0360E3E0751BD9A566CD03FA6CAFC78118B82BA0"}}},{"DeletedNode":{"FinalFields":{"Account":"r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu","BookDirectory":"1AC09600F4B502C8F7F830F80B616DCB6F3970CB79AB70975A0A17219D4DEC23","BookNode":"0","Flags":0,"OwnerNode":"0","PreviousTxnID":"BD0A04BF22DDDFFA37139A550C1343F8F2931911077F75C8614919C50401235D","PreviousTxnLgrSeq":87343598,"Sequence":141402324,"TakerGets":{"currency":"CNY","issuer":"rJ1adrpGS3xsnQMb9Cw54tWJVFPuSdZHK","value":"52773.6397994444"},"TakerPays":"14988678973"},"LedgerEntryType":"Offer","LedgerIndex":"594E152150B649FF3D69F90368C0B9DBF662BC15EA46E1601C5DAF5BDDC46497"}},{"ModifiedNode":{"FinalFields":{"Flags":0,"IndexNext":"0","IndexPrevious":"0","Owner":"r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu","RootIndex":"61A2D4D91D15A90D90837A79B9225D7D5CEB19C69ECF890F16649A139F97B491"},"LedgerEntryType":"DirectoryNode","LedgerIndex":"61A2D4D91D15A90D90837A79B9225D7D5CEB19C69ECF890F16649A139F97B491"}},{"ModifiedNode":{"FinalFields":{"Account":"r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu","Balance":"86658326","Flags":0,"OwnerCount":5,"Sequence":141402329},"LedgerEntryType":"AccountRoot","LedgerIndex":"E8B91782E060B7102CA61FAE6216D4F8D4BD383775A3284C656B41D587DA7D42","PreviousFields":{"Balance":"86658341","Sequence":141402328},"PreviousTxnID":"EE43BBD4C5CA09AEB4C7BC5FFF0DF2A6FCC4FC397AC93CC5335D17DEB8AAF921","PreviousTxnLgrSeq":87343598}}],"TransactionIndex":10,"TransactionResult":"tesSUCCESS"},"validated":true,"date":766564672,"ledger_index":87343600,"inLedger":87343600,"status":"success"},"warnings":[{"id":2001,"message":"This is a clio server. clio only serves validated data. If you want to talk to rippled, include 'ledger_index':'current' in your request"}]}
	`
	//06B1F1035601639B87B1638E9FA3B306A0A542614C16C325CDDF6BEC2D54F2F3, 0B3FF2924B40F4CEF3CA8B586F2FE6C160B006E888FC502E42F01A02F11A0597
)

type xrpClientTestSuite struct {
	suite.Suite

	ctrl      *gomock.Controller
	testapp   testapp.TestApp
	rpcClient *jsonrpcmocks.MockClient
	client    internal.Client
}

func TestXrpClientTestSuite(t *testing.T) {
	suite.Run(t, new(xrpClientTestSuite))
}

func (s *xrpClientTestSuite) SetupTest() {
	s.ctrl = gomock.NewController(s.T())
	s.rpcClient = jsonrpcmocks.NewMockClient(s.ctrl)

	var result internal.ClientParams
	s.testapp = testapp.New(
		s.T(),
		Module,
		testModule(s.rpcClient),
		testapp.WithBlockchainNetwork(
			common.Blockchain_BLOCKCHAIN_XRP,
			common.Network_NETWORK_XRP_MAINNET),
		fx.Populate(&result),
	)

	s.client = result.Master
	s.NotNil(s.client)
}

func (s *xrpClientTestSuite) TearDownTest() {
	s.testapp.Close()
	s.ctrl.Finish()
}

func testModule(client *jsonrpcmocks.MockClient) fx.Option {
	return fx.Options(
		internal.Module,
		restapi.Module,
		fx.Provide(fx.Annotated{
			Name:   "master",
			Target: func() jsonrpc.Client { return client },
		}),
		fx.Provide(fx.Annotated{
			Name:   "slave",
			Target: func() jsonrpc.Client { return client },
		}),
		fx.Provide(fx.Annotated{
			Name:   "validator",
			Target: func() jsonrpc.Client { return client },
		}),
		fx.Provide(fx.Annotated{
			Name:   "consensus",
			Target: func() jsonrpc.Client { return client },
		}),
		fx.Provide(dlq.NewNop),
		fx.Provide(parser.NewNop),
	)
}

func (s *xrpClientTestSuite) TestXrpClient_New() {
	var result internal.ClientParams
	app := testapp.New(
		s.T(),
		Module,
		internal.Module,
		jsonrpc.Module,
		restapi.Module,
		testapp.WithBlockchainNetwork(common.Blockchain_BLOCKCHAIN_XRP, common.Network_NETWORK_XRP_MAINNET),
		fx.Provide(dlq.NewNop),
		fx.Provide(parser.NewNop),
		fx.Populate(&result),
	)
	defer app.Close()

	s.NotNil(result.Master)
	s.NotNil(result.Slave)
	s.NotNil(result.Validator)
	s.NotNil(result.Consensus)
}

// BATCH GET BLOCK METADATA
func (s *xrpClientTestSuite) TestXrpClient_BatchGetBlockMetadataByRange() {
	heights := []uint64{uint64(101), uint64(102), uint64(103)}
	blockParams := make([]jsonrpc.Params, len(heights))

	for i, height := range heights {
		blockParams[i] = jsonrpc.Params{ledgerRequest{
			LedgerIndex:  strconv.FormatUint(height, 10),
			Transactions: true,
		}}
	}

	getBlocksResponses := []*jsonrpc.Response{
		{
			Result: json.RawMessage(XRP_LEDGER_RESPONSE_1),
		},
		{
			Result: json.RawMessage(XRP_LEDGER_RESPONSE_2),
		},
		{
			Result: json.RawMessage(XRP_LEDGER_RESPONSE_3),
		},
	}

	s.rpcClient.EXPECT().BatchCall(
		gomock.Any(), xrpGetLedger, blockParams,
	).Return(getBlocksResponses, nil)

	metadata, err := s.client.BatchGetBlockMetadata(context.Background(), Tag, 101, 104)
	s.NoError(err)
	s.NotNil(metadata)
	s.Equal(len(heights), len(metadata))

	for i, height := range heights {
		s.NotNil(metadata[i])
		s.Equal(height, metadata[i].Height)
		s.Equal(height-1, metadata[i].ParentHeight)
		s.Equal(Tag, metadata[i].Tag)
		s.NotNil(metadata[i].ParentHash)
	}
}

func (s *xrpClientTestSuite) TestXrpClient_BatchGetBlockMetadata_FromGreaterThanTo() {
	heights := []uint64{uint64(101), uint64(102), uint64(103)}
	blockParams := make([]jsonrpc.Params, len(heights))

	for i, height := range heights {
		blockParams[i] = jsonrpc.Params{ledgerRequest{
			LedgerIndex:  strconv.FormatUint(height, 10),
			Transactions: true,
		}}
	}

	metadata, err := s.client.BatchGetBlockMetadata(context.Background(), Tag, 104, 101)
	s.Error(err)
	s.Nil(metadata)
}

func (s *xrpClientTestSuite) TestXrpClient_BatchGetBlockMetadata_gRPCCallFailed() {
	heights := []uint64{uint64(101), uint64(102), uint64(103)}
	blockParams := make([]jsonrpc.Params, len(heights))
	batchCallFailedErrors := make([]*jsonrpc.Response, len(heights))

	for i, height := range heights {
		blockParams[i] = jsonrpc.Params{ledgerRequest{
			LedgerIndex:  strconv.FormatUint(height, 10),
			Transactions: true,
		}}
		batchCallFailedErrors[i] = &jsonrpc.Response{Error: &jsonrpc.RPCError{}}
	}

	s.rpcClient.EXPECT().BatchCall(
		gomock.Any(), xrpGetLedger, blockParams,
	).Return(batchCallFailedErrors, nil)

	metadata, err := s.client.BatchGetBlockMetadata(context.Background(), Tag, 101, 104)
	s.Error(err)
	s.Nil(metadata)
}

func (s *xrpClientTestSuite) TestXrpClient_BatchGetBlockMetadata_ResponseSizeNotEqualsToRequestSize() {
	heights := []uint64{uint64(101), uint64(102), uint64(103)}
	blockParams := make([]jsonrpc.Params, len(heights))

	for i, height := range heights {
		blockParams[i] = jsonrpc.Params{ledgerRequest{
			LedgerIndex:  strconv.FormatUint(height, 10),
			Transactions: true,
		}}
	}

	getBlocksResponses := []*jsonrpc.Response{
		{
			Result: json.RawMessage(XRP_LEDGER_RESPONSE_1),
		},
		{
			Result: json.RawMessage(XRP_LEDGER_RESPONSE_2),
		},
	}

	s.rpcClient.EXPECT().BatchCall(
		gomock.Any(), xrpGetLedger, blockParams,
	).Return(getBlocksResponses, nil)

	metadata, err := s.client.BatchGetBlockMetadata(context.Background(), Tag, 101, 104)
	s.Error(err)
	s.Nil(metadata)
}

// GET BLOCK BY HEIGHT
func (s *xrpClientTestSuite) TestXrpClient_GetBlockByHeight_gRPCCallFailed() {
	height := 101
	getBlockByHeightResponse := &jsonrpc.Response{
		Error: &jsonrpc.RPCError{},
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerIndex:  strconv.FormatUint(101, 10),
				Transactions: true,
			},
		},
	).Return(nil, getBlockByHeightResponse.Error)

	_, err := s.client.GetBlockByHeight(context.Background(), Tag, uint64(height))
	s.Error(err)
}

func (s *xrpClientTestSuite) TestXrpClient_GetBlockByHeight_FailedToAssembleLedgerHeader() {
	height := 101
	getBlockByHeightResponse := &jsonrpc.Response{
		Result: json.RawMessage(XRP_EMPTY_LEDGER),
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerIndex:  strconv.FormatUint(101, 10),
				Transactions: true,
			},
		},
	).Return(getBlockByHeightResponse, nil)

	_, err := s.client.GetBlockByHeight(context.Background(), Tag, uint64(height))
	s.Error(err)
}

func (s *xrpClientTestSuite) TestXrpClient_GetBlockByHeight_FailedToAssembleTransactions() {
	height := 101
	getBlockByHeightResponse := &jsonrpc.Response{
		Result: json.RawMessage(XRP_EMPTY_TRANSACTIONS),
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerIndex:  strconv.FormatUint(101, 10),
				Transactions: true,
			},
		},
	).Return(getBlockByHeightResponse, nil)

	_, err := s.client.GetBlockByHeight(context.Background(), Tag, uint64(height))
	s.Error(err)
}

func (s *xrpClientTestSuite) TestXrpClient_GetBlockByHeight_FailedToBatchCallForTransactions() {
	height := 101
	getBlockByHeightResponse := &jsonrpc.Response{
		Result: json.RawMessage(XRP_FEW_TRANSACTIONS),
	}
	getTransactionErrorResponses := make([]*jsonrpc.Response, 3)
	for i := 0; i < 3; i++ {
		getTransactionErrorResponses[i] = &jsonrpc.Response{
			Error: &jsonrpc.RPCError{},
		}
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerIndex:  strconv.FormatUint(uint64(height), 10),
				Transactions: true,
			},
		},
	).Return(getBlockByHeightResponse, nil)

	s.rpcClient.EXPECT().BatchCall(
		gomock.Any(), xrpGetTransaction, gomock.Any(),
	).Return(getTransactionErrorResponses, nil)

	_, err := s.client.GetBlockByHeight(context.Background(), Tag, uint64(height))
	s.Error(err)
}

func (s *xrpClientTestSuite) TestXrpClient_GetBlockByHeight() {
	height := 87343600
	getBlockByHeightResponse := &jsonrpc.Response{
		Result: json.RawMessage(XRP_FEW_TRANSACTIONS),
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerIndex:  strconv.FormatUint(uint64(height), 10),
				Transactions: true,
			},
		},
	).Return(getBlockByHeightResponse, nil)

	getTransactionResponses := []*jsonrpc.Response{
		{
			Result: json.RawMessage(XRP_TRANSACTION_RESPONSE_1),
		},
		{
			Result: json.RawMessage(XRP_TRANSACTION_RESPONSE_2),
		},
		{
			Result: json.RawMessage(XRP_TRANSACTION_RESPONSE_3),
		},
	}

	s.rpcClient.EXPECT().BatchCall(
		gomock.Any(), xrpGetTransaction, gomock.Any(),
	).Return(getTransactionResponses, nil)

	block, err := s.client.GetBlockByHeight(context.Background(), Tag, uint64(height))
	s.NoError(err)

	s.Equal(common.Blockchain_BLOCKCHAIN_XRP, block.Blockchain)
	s.Equal(common.Network_NETWORK_XRP_MAINNET, block.Network)
	s.Equal(Tag, block.Metadata.Tag)
	s.Equal("F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C", block.Metadata.Hash)
	s.Equal("71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491", block.Metadata.ParentHash)
	s.Equal(uint64(87343600), block.Metadata.Height)

	blobdata := block.GetXrp()
	s.NotNil(blobdata)
	s.NotNil(blobdata.Header)
	s.NotNil(blobdata.LedgerTransactions)
	s.Equal(3, len(blobdata.LedgerTransactions))
}

func (s *xrpClientTestSuite) TestXrpClient_GetBlockByHash() {
	hash := "F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C"
	height := 87343600
	getBlockByHeightResponse := &jsonrpc.Response{
		Result: json.RawMessage(XRP_FEW_TRANSACTIONS),
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerHash:   hash,
				Transactions: true,
			},
		},
	).Return(getBlockByHeightResponse, nil)

	getTransactionResponses := []*jsonrpc.Response{
		{
			Result: json.RawMessage(XRP_TRANSACTION_RESPONSE_1),
		},
		{
			Result: json.RawMessage(XRP_TRANSACTION_RESPONSE_2),
		},
		{
			Result: json.RawMessage(XRP_TRANSACTION_RESPONSE_3),
		},
	}

	s.rpcClient.EXPECT().BatchCall(
		gomock.Any(), xrpGetTransaction, gomock.Any(),
	).Return(getTransactionResponses, nil)

	block, err := s.client.GetBlockByHash(context.Background(), Tag, uint64(height), hash)
	s.NoError(err)

	s.Equal(common.Blockchain_BLOCKCHAIN_XRP, block.Blockchain)
	s.Equal(common.Network_NETWORK_XRP_MAINNET, block.Network)
	s.Equal(Tag, block.Metadata.Tag)
	s.Equal("F494F287EC699AA623B53FB97852B31146FA9CF52E46AC0711CC3E853D26315C", block.Metadata.Hash)
	s.Equal("71CDE61B9183FAA5DA82A9232AC061A8FCC85B1DB1793AC47766B46277E92491", block.Metadata.ParentHash)
	s.Equal(uint64(87343600), block.Metadata.Height)

	blobdata := block.GetXrp()
	s.NotNil(blobdata)
	s.NotNil(blobdata.Header)
	s.NotNil(blobdata.LedgerTransactions)
	s.Equal(3, len(blobdata.LedgerTransactions))
}

func (s *xrpClientTestSuite) TestXrpClient_GetLatestHeight() {
	height := 87343600
	getBlockByHeightResponse := &jsonrpc.Response{
		Result: json.RawMessage(XRP_FEW_TRANSACTIONS),
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerHash:   "current",
				Transactions: true,
			},
		},
	).Return(getBlockByHeightResponse, nil)

	latestHeight, err := s.client.GetLatestHeight(context.Background())
	s.NoError(err)

	s.Equal(uint64(height), latestHeight)
}

func (s *xrpClientTestSuite) TestXrpClient_GetLatestHeight_UnableAssembleTransaction() {
	getLatestHeightResponse := &jsonrpc.Response{
		Error: &jsonrpc.RPCError{},
	}
	s.rpcClient.EXPECT().Call(
		gomock.Any(), xrpGetLedger, jsonrpc.Params{
			ledgerRequest{
				LedgerHash:   "current",
				Transactions: true,
			},
		},
	).Return(getLatestHeightResponse, nil)

	_, err := s.client.GetLatestHeight(context.Background())
	s.Error(err)
}
